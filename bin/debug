#!/usr/bin/perl

# This script opens up an emacs window with the given program running under a
# debugger, all automagic-like. Usual usage is to prepend 'debug' to the
# command line you're running. It generally works to pass it to driver scripts
# that invoke gdb for you as well (eg use --debugger=debug in place of
# --debugger=gdb). It autodetects which sort of debugger to use:
#
#  - For binaries, the debugger will be gdb
#  - For perl scripts, it will be perldb
#  - For shell scripts, assume we're running firefox (yeah, nice and
#    general, huh?) and use the -g flag
#  - If expicitly requested via --js, the debugger will be jorendb. But by default,
#    running a JS file with the JS shell will use gdb.
#
# The command given may be a regular command in $PATH, a shell alias,
# or even a shell function (of a very restricted and undocumented syntax).
#
# Yes, this script is a complete and utter hack. I've grafted on various
# bits of new functionality over time, and not in a principled way. It's
# probably only useful for my idiosyncratic ways of doing things. But I
# love it all the same and use it heavily, so screw off.
#
# Use --help to see a usage description.
#

use strict;
use warnings;
use File::Temp qw(tempdir);
use Cwd qw(abs_path);
use File::Basename qw(dirname basename);

my $TMPDIR = tempdir(CLEANUP => 1);

our $VERSION = "1.2";

my @EMACS = qw(emacs);
if ($ENV{DEBUG_EDITOR}) {
  @EMACS = $ENV{DEBUG_EDITOR} =~ /(\".*?\"|\'.*?\'|\S+)/g;
}

my $gdb = "gdb";

my $PERL = "/usr/bin/perl";
$PERL = "perl" if (! -x $PERL);

my $PYTHON = $ENV{PYTHON} || "/usr/bin/python";
$PYTHON = "python" if (! -x $PYTHON);

my %opt = (
    interactive => $ENV{GDB_INTERACTIVE},
);

$opt{interactive} = 1 if ($ENV{DBG} || '') eq 'startup';

# <khuey> could someone add a bit to it suggesting that AMD users add
# --env=NSS_DISABLE_HW_SHA=1 to their rr record command lines?
if (qx(lspci -s 00:00.0) =~ /Advanced Micro Devices/) {
    $ENV{NSS_DISABLE_HW_SHA} = 1;
}

my $debugger;
my $jorendb;
my $rrpid;
my $rr_args = '';
my $rr_cpu;
my $rr_at;
my $verbose;
my $core_num;

# Ugh... custom arg handling because this script is supposed to be a
# transparent wrapper, and so can't use a standard getopt-ish handler.
my @local_args;
while (@ARGV && ($ARGV[0] =~ /^-/ || ($ARGV[0] =~ /^(\w+)=(\S+)/))) {
  local $_ = shift(@ARGV);

  if (defined $1) {
      $ENV{$1} = $2;
      next;
  }

  if ($_ eq '-i') {
    $opt{interactive} = 1;
  } elsif ($_ eq '-p') {
    die if $debugger;
    $debugger = 'perl';
  } elsif ($_ eq '--gdb') {
    die if $debugger;
    $debugger = 'gdb';
  } elsif ($_ eq '--record') {
    die if $debugger;
    $debugger = 'record';
  } elsif ($_ eq '--rrpid') {
    $rrpid = shift(@ARGV);
  } elsif ($_ =~ /--rrpid=(.*)/) {
    $rrpid = $1;
  } elsif ($_ eq '--rrargs' || $_ eq '--rr' || $_ eq '--rr-args') {
    $rr_args = shift(@ARGV);
    $debugger = 'rr';
  } elsif ($_ =~ /--rr(?:-?args)?=(.*)/) {
    $rr_args = $1;
    $debugger = 'rr';
  } elsif ($_ eq '--rr(?:-?)cpu') {
    $rr_cpu = shift(@ARGV);
    $debugger = 'rr';
  } elsif ($_ =~ /--rr(?:-?)cpu=(.*)/) {
    $rr_cpu = $1;
    $debugger = 'rr';
  } elsif ($_ eq '--rrat' || $_ eq '--rr-at') {
    $rr_at = shift(@ARGV);
    $debugger = 'rr';
  } elsif ($_ =~ /--rr(?:-?at)?=(.*)/) {
    $rr_at = $1;
    $debugger = 'rr';
  } elsif ($_ =~ /(--n$|--n=|-n)(.*)/) {
    if ($core_num eq '') {
      $core_num = shift(@ARGV);
    }
    $core_num = $2;
    $debugger = 'rr';
  } elsif ($_ eq '--js' || $_ eq '-j') {
    die if $debugger;
    $debugger = 'jorendb';
  } elsif (/^--js=(.*)/) {
    die if $debugger;
    $debugger = 'jorendb';
    $jorendb = $1;
  } elsif ($_ eq '--check') {
    $opt{pattern} = shift(@ARGV);
  } elsif (/^--check=(.*)/) {
    $opt{pattern} = $1;
  } elsif ($_ eq '--version') {
    print "Version $VERSION\n";
  } elsif (($_ eq '-v') || ($_ eq '--verbose')) {
      $verbose = 1;
  } elsif ($_ eq '-h' || $_ eq '--help') {
    usage();
  } else {
    usage("unknown debug option '$_'");
  }

  push @local_args, $_;
}

my @rr_args = split(/\s+/, $rr_args);

if (defined $rr_at) {
  if ($rr_at =~ /^\[rr (\d+) (\d+)\]$/) {
    push @rr_args, "-t$1", "-g$2";
  } else {
    die "invalid syntax for --rr-at option. Must be '[rr MMMM NNNN]'.\n";
  }
}

if (defined $core_num) {
    # Do not bind to a core.
    push @rr_args, "-u";
}

sub usage {
  my ($msg) = @_;
  if (defined $msg) {
    select(STDERR);
    print $msg, "\n\n";
  }
  print <<'END';
Usage: debug [env=VAL...] [options] <program> args...

   -h               Display this help message
   --version        Print out the version of this script
   -i               Interactive mode; do not start running the program
   -p               Perl mode (useful when autodetection not possible)
   --gdb            Gdb mode
   --record         Record under rr, then replay
   --rrpid=PID      The pid to debug (default is to guess; crashes are preferred)
                    The pid can also be NAME, which will be matched against the
                    basename of commands
   --rr='args'      Additional arguments to pass to 'rr replay'.
   --js[=PATH]      Jorendb mode, with optional PATH to jorendb.js
   --check PATTERN  Run the command and scan its output for PATTERN. If it is
                    found, kill emacs and continue. This is useful when you
                    want to embed a call to 'debug' into the invocation of a
                    helper program, but you only want to debug some of the
                    runs of that helper program (eg the ones that crash, or
                    report a problem or whatever.) Perhaps this should be
                    named --continue-if or something.

Various environment variables can affect the operation. Let's see...
  $DBG :
     set to qr/EXPRESSION/ to only fire up emacs for programs
     that match the given regex. Useful when you are running
     a program that runs another program that runs the one you
     want to debug. Or, as a wholly redundant special case, if
     this is set to "startup" then it is the same as GDB_INTERACTIVE.
  $DBG_DISPLAY :
     if set, gdb uses it as $DISPLAY for the debugger emacs window. This
     is to allow running the debug window on one display (text terminal,
     probably) and sending the X output of the debugged process to another.
     Currently only works for gdb, not perldb.
  $GDB_INITFILE :
     gdb will execute this file when it starts up.
     There are better ways of doing this, you know.
  $GDB_INITSTRING :
     execute the given gdb command at startup.
  $GDB_INTERACTIVE :
     set this to any nonempty value to have gdb
     pause before running the program. The '-i' command-line
     option does the same thing.
END
  exit defined($msg) ? 1 : 0;
}

my ($COMMAND, @args) = @ARGV;

sub choose_debugger_for_rr {
  my ($pid) = @_;

  my $rr_ps_cmd = rr_ps_cmd($rr_args);
  open(my $fh, "$rr_ps_cmd |");
  my @info;
  while(<$fh>) {
      chomp;
      # Continuation lines end with \.
      if (@info && $info[-1][-1] =~ /\\$/) {
          chop($info[-1][-1]);
          $info[-1][-1] .= "\n" . $_;
      } else {
          push @info, [ split(/\t/, $_, 4) ];
      }
  }
  die "rr ps format changed!" if shift(@info)->[2] ne 'EXIT';

  foreach (@info) {
    if ($_->[0] == $pid) {
      if ($_->[3] =~ m!/target/!) {
        # Looks like a rust binary. Yes, this is a crappy test. Use rust-gdb.
        return ('-d', 'rust-gdb');
      } else {
        last;
      }
    }
  }

  return ();
}

sub rr_ps_cmd {
  my ($rr_args) = @_;
  # Ugh. "-g 300" will confuse this. It wants "-g300". I need to rethink
  # this. In the meantime...
  $rr_args =~ s/-[gfpdhstxA] (\S+)/-$1$2/g;
  my @plain_rr_args = grep !/^-/, split(/ /, $rr_args);
  return "rr ps @plain_rr_args";
}

sub choose_pid_for_rr {
    my ($pattern) = @_;

    return $pattern if defined($pattern) && $pattern =~ /^\d+$/;

    # Find a process from the recording to debug. If a pattern was given,
    # return the first one whose base command or arguments match that pattern.
    # Otherwise, use:
    #
    # - the first one that exited with a signal, falling back to
    # - the first erroring descendant process, falling back to
    # - the last process.
    #
    # That middle one requires more explanation. The idea is that something
    # errored out. If there was a sequence of commands, you want when the
    # trouble started, so you choose the first process that errored. But that
    # process may be propagating an error from something it ran, so don't just
    # pick the first erroring process, pick the first one of its children that
    # errored (if any; if none did, use the erroring parent). Recursively.
    #

    my $rr_ps_cmd = rr_ps_cmd($rr_args);
    open(my $fh, "$rr_ps_cmd |");
    my @info;
    while(<$fh>) {
        chomp;
        # Continuation lines end with \.
        if (@info && $info[-1][-1] =~ /\\$/) {
            chop($info[-1][-1]);
            $info[-1][-1] .= "\n" . $_;
        } else {
            push @info, [ split(/\t/, $_, 4) ];
        }
    }
    die "rr ps format changed!" if shift(@info)->[2] ne 'EXIT';

    if (defined $pattern) {
        my @relevant;
        foreach (@info) {
            my @cmd = split(/ /, $_->[3]);
            push @relevant, $_ if basename($cmd[0]) eq $pattern;
        }
        if (@relevant == 0) {
            foreach (@info) {
                my @cmd = split(/ /, $_->[3]);
                push @relevant, $_ if @cmd > 1 && basename($cmd[1]) eq $pattern;
            }
        }
        return if @relevant == 0;
        @info = @relevant;
    }
    my $first_error_pid;
    my %status;
    my %children;
    my @sigs;
    foreach (@info) {
        my ($pid, $ppid, $status, $cmd) = @$_;
        $status = -11 if $status eq 11; # SIGSEGV gets translated to this sometimes??
        $status = 0 if $cmd =~ /^\S+llvm-symbolizer\b/;
        print "pid $pid exited with status $status\n"
            if $verbose;
        push @sigs, $_ if $status ne 'none' && $status < 0; # Caught a signal
        $status{$pid} = $status;
        push @{ $children{$ppid} }, $pid;
        $first_error_pid ||= $pid if $status; # Exited with error
    }

    if (@sigs > 0) {
        sub getrank {
            my $exit = shift->[2];
            return { -11 => 1, -6 => 2, -9 => 1000 }->{$exit} || 10 + -$exit;
        }
        @sigs = sort { getrank($a) <=> getrank($b) } @sigs;
        print @sigs . " exited with signals, choosing $sigs[0]->[0] with exit $sigs[0]->[2]\n"
            if $verbose;
        return $sigs[0]->[0];
    }

    # Regular (positive) nonzero exit status. Find deepest erroring descendant.
    FIND_DESCENDANT:
    while ($first_error_pid) {
        print "scanning pid $first_error_pid\n"
            if $verbose;
        for my $kid (@{ $children{$first_error_pid} }) {
            # I'm not sure when the 'none' status appears in general, but it
            # happens in sanitizer runs for the `llvm-symbolizer` child
            # process, and we generally do not want to debug that. So for now,
            # treat it as a successful exit here.
            if ($status{$kid} && $status{$kid} ne 'none') {
                $first_error_pid = $kid;
                next FIND_DESCENDANT;
            }
        }
        print "using pid $first_error_pid status $status{$first_error_pid} as first, deepest erroring descendant\n"
            if $verbose;
        return $first_error_pid;
    }

    # Last process in the trace.
    return $info[-1][0];
}

# Allow the command to be an alias. Hackety hack hack hack.
if ($COMMAND && $COMMAND !~ m!/!) {
  chomp(my $which = qx!which $COMMAND 2>/dev/null!);
  if ($which =~ m!/!) {
    $COMMAND = $which;
  } else {
    open(my $fh, "$ENV{SHELL} -i -c alias |");
    while(<$fh>) {
      chomp;
      if (/^(\S+?)[=\t](.+)/) {
        my ($token, $expansion) = ($1, $2);

        # Not sure why this happens, but sometimes escape sequences
        # can get embedded in here. This isn't a very good way of getting
        # rid of them.
        $token =~ s/^\W+//;

        $expansion = $1 if $expansion =~ /^'(.*)'$/;
        $expansion = $1 if $expansion =~ /^"(.*)"$/;
        if ($token eq $COMMAND) {
          print "  setting COMMAND to $expansion\n";
          $COMMAND = $expansion;
          last;
        }
      }
    }
  }
}

# Or even a shell function (of a very restricted syntax)
if ($COMMAND && $COMMAND !~ m!/!) {
  chomp(my $which = qx!$ENV{SHELL} -i -c 'whence -f $COMMAND'!);
  $which =~ s/^.*\n\s*//;
  $which =~ s/}$//;
  chomp($which);
  if ($which eq '') {
      die "$0: unable to determine what '$COMMAND' might be";
  }
  my @orig_args = @args;
  my @new_args;
  ($COMMAND, @new_args) = split(/\s+/, $which);
  @args = ();
  foreach (@new_args) {
      if ($_ eq '"$@"') {
          push @args, @orig_args;
      } else {
          push @args, $_;
      }
  }
}

# Double slashes confuse emacs because it starts over at the root
$COMMAND =~ s!/+!/!g if $COMMAND;

chomp($ENV{CWD} = `pwd`);

# Check whether we should skip debugging this invocation
# (if DBG is set to qr/something/ that doesn't match the command line)
if ($ENV{DBG} && $ENV{DBG} =~ /qr/) {
        my $pattern = eval $ENV{DBG};
        if (join(" ", @ARGV) !~ $pattern) {
            exec(@ARGV) or die;
        }
}

mkdir("$TMPDIR/debug-args", 0777);
unlink(glob("$TMPDIR/debug-args/*"));

# Find the dividing point in "perl -a -b -c somefile.pl" between the perl
# invocation with its arguments, and the script to be invoked. Also used for
# python; so far, they've been close enough.
sub scriptname_index {
  my $i = 0;
  while ($i < @_) {
    if ($_[$i] =~ /^-/) {
      if ($_[$i] =~ /^--/) {
        if ($_[$i] =~ /^--.*=/) {
          # Option value is within same argument (--foo=bar)
        } else {
          $i++; # Skip option value (--foo bar); not really correct
        }
      } else {
        if ($_[$i] =~ /^-\w*e$/) {
          # Bundle of options containing -e, eg '-lne' or just '-e'
          $i++; # Skip script
#        } elsif ($_[$i] =~ /^-.$/) {
#          $i++; # Skip single-char option argument BAD IDEA b/c it may not have an arg
        } else {
          # Assume no argument or argument bundled with option eg -I/tmp
        }
      }
    } else {
      return $i;
    }
    $i++;
  }

  return @_;
}

# gud mode cannot handle args with spaces in them, so convert -e "SOME
# SCRIPT" into -e do'/tmp/xyz.pl' where /tmp/xyz.pl contains "SOME
# SCRIPT"
#
# Further bizarreness: gud is stupid and tries to convert the do'/tmp/...'
# script into an absolute path (it thinks it's the filename you're running,
# because it's the first argument that doesn't start with a dash. So prefix
# it with "-1;" just so it starts with a dash.
#
# I could replace -e ... with just the filename where I wrote the script, but
# that means handling -e vs -ne differently, and it's too much trouble.
#
# This subroutine also smushes -I /foo into -I/foo to accommodate the
# same gud brain damage.
sub fix_spaces {
  my ($array) = @_;

  my $e_ctr = 0;

  for (my $i = 0; $i < @$array; ++$i) {
      if ($array->[$i] =~ /^-.*e$/) {
          my $fn = "$TMPDIR/debug-args/expr-$e_ctr.pl";
          $e_ctr++;
          ++$i;
          open(my $fh, ">", $fn) or die "Unable to write $fn: $!";
          print $fh $array->[$i], "\n";
          close $fh;
          $array->[$i] = "-1;do'$fn'";
      } elsif ($array->[$i] eq '-I') {
          $array->[$i] .= $array->[$i+1];
          splice(@$array, $i + 1, 1);
      }
  }
}

sub protect {
    local $_ = shift;
    s/([\'\"\\ ])/\\$1/g;
    return $_;
}

# Figure out whether to run the perl debugger, and if so, massage the
# command line.
#
# Case 1: debug perl -I /tmp somescript.pl a b c
#  - COMMAND=perl somescript.pl
#  - args=a b c
# Case 2: debug somescript.pl a b c
#  - COMMAND=perl somescript.pl
#  - args=a b c
# Case 3: debug perl -I /tmp -e 'print "1\n"' a b c
#  - COMMAND=perl -e 1
#  - args=-e 'print "1\n"' a b c
# Case 4: debug -p firefox -I /tmp spot.html
#  - COMMAND=firefox
#  - args=spot.html
#  - FIXME
# Case 5: debug -p reactor -I /tmp -e 'print "1\n"' spot.xml
#  - COMMAND=reactor
#  - args=spot.xml
#
if ($COMMAND) {
    if (! $debugger) {
        if ($COMMAND =~ /\bperl$/) {
            $debugger = 'perl';
            fix_spaces(\@args);
            my $fi = scriptname_index(@args);
            $COMMAND = join(" ", $COMMAND, "-d", splice(@args, 0, $fi + 1));
        } elsif (`file -L $COMMAND` =~ /[pP]erl/) {
            $debugger = 'perl';
            $COMMAND = "$PERL -d $COMMAND";
        }
    } elsif ($debugger eq 'perl') {
        fix_spaces(\@args);
        $COMMAND = join(" ", map { protect($_) } $COMMAND, "-d", @args);
    }
}

sub is_python_script {
    my ($file) = @_;
    return 1 if `file -L $file` =~ /[pP]ython/;

    # Look for python scripts masquerading as shell scripts
    system("grep", "-q", 'exec python.*\\$\@', $file);
    return ($? == 0);
}

# Similar set of cases for python
if ($COMMAND && ! $debugger) {
    if ($COMMAND =~ /\bpython/) {
        $debugger = 'python';
    } elsif (is_python_script($COMMAND)) {
        $debugger = 'python';
        unshift(@args, $COMMAND);
        $COMMAND = $PYTHON;
    }

    if ($debugger && $debugger eq 'python') {
        my $idx = scriptname_index(@args);
        @args = map { qq(\\"$_\\") } @args;
        splice(@args, $idx, 0, "-m", "pdb");
        $COMMAND = join(" ", $COMMAND, @args);
    }
}

$debugger //= ($COMMAND ? 'gdb' : 'rr');
my @dbg_args;
if ($debugger eq 'rr') {
    $debugger = 'rr';
    $rrpid = choose_pid_for_rr($rrpid);
    @dbg_args = choose_debugger_for_rr($rrpid);
    die "no matching process found\n" if ! defined $rrpid;
    $COMMAND = '';
    $opt{interactive} = 1;
}

if ($debugger eq 'perl') {
  my $argfile = "$TMPDIR/debug-args/perl-args-$$";
  open(ARGFILE, ">$argfile") or die "create $argfile: $!";
  print ARGFILE "$_\n" foreach (@args);
  close ARGFILE;

  print "argfile=$argfile\n" if $verbose;

  my $eval = <<"END";
(let ((default-directory "$ENV{CWD}")
      (gud-chdir-before-run nil))
 (perldb "$COMMAND"))
(insert "chomp(\@DB::ARGS=`cat $argfile`)")
(comint-send-input)
(insert "\@ARGV=\@DB::ARGS")
(comint-send-input)
END

  print "eval=$eval\n" if $verbose;

# For whatever reason, the process sentinel stuff doesn't take here
#
#   unless ($opt{interactive}) {
#       $eval .= <<"END";
# (set-process-sentinel
#  (get-buffer-process (current-buffer))
#  (lambda (process event)
#   (if (equal event "finished\n") (kill-emacs))))
# (insert "DB::NonStop(1)")
# (comint-send-input)
# (insert "c")
# (comint-send-input)
# END
#   }

  $eval =~ s/\n/ /g;

  exec(@EMACS, "--eval", "(progn $eval)") or die;
} elsif ($debugger eq 'python') {
    print "COMMAND=$COMMAND\n";
  my $eval = <<"END";
(pdb "$COMMAND")
(comint-send-input)
(require 'python)
(add-hook 'comint-output-filter-functions 'python-pdbtrack-comint-output-filter-function t))
END

  $eval =~ s/\n/ /g;

  exec(@EMACS, "--eval", "(progn $eval)") or die;
} elsif ($debugger eq 'jorendb') {
  if (grep { $_ eq '--fuzzing-safe' } @args) {
    die "jorendb requires fuzzing-unsafe functions";
  }

  $COMMAND = Cwd::abs_path($COMMAND);
  if (!$jorendb) {
      $jorendb = Cwd::abs_path(dirname($COMMAND) . "/../../../../js/examples");
      if (!$jorendb) {
          $jorendb = Cwd::abs_path(dirname($COMMAND) . "/../../../js/examples");
      }
  }
  die "cannot find jorendb.js" if !$jorendb;
  if (! -f $jorendb) {
    $jorendb .= "/jorendb.js";
  }
  die "cannot find jorendb.js" if ! -f $jorendb;

  unshift(@args, "-f", $jorendb, "--");

  my $cwd = Cwd::getcwd();
  print "setting default-directory = $cwd\n";

  # Quoting needs to be compatible with emacs's split-string-and-unquote, which
  # is a PITA. Fortunately, (split-string-and-unquote (combine-and-quote-strings
  # (x))) is guaranteed to be s. And providing the argument to
  # (combine-and-quote-strings) can be done by "encoding" an arbitrary string by
  # replacing all problematic chars, and then decoding that in elisp before
  # passing it in. So we encode in Perl, command-line quoting doesn't mess
  # anything up, then decode in elisp and make a list of the decoded strings,
  # combine them, and pass them to (gud-gdb). Which will then split them back
  # apart with split-string-and-unquote. Victory!
  print "pre: @args\n";
  foreach (@args) {
    s/ /<SP>/g;
    s/\"/<QQ>/g;
    #s/\'/<Q>/g;
    $_ = "(decode-stuff \"$_\")";
  }

  # ARGH! Nothing simpler to get into the right directory works, because gud
  # cds back to something based on the jorendb.js path and setting
  # gud-chdir-before-run in normal ways fails.
  my $eval = <<"END";
(custom-set-variables '(gud-chdir-before-run nil))
(defun decode-stuff (s) (string-replace "<QQ>" (string 34) (string-replace "<SP>" " " s)))
(gud-gdb (combine-and-quote-strings (list "$COMMAND" @args))))
END

  $eval =~ s/\n/ /g;

  exec(@EMACS, "--eval", "(progn $eval)") or die;
}

# From here on, we're going to use gdb or rr.

# Set the arguments
my $fname = "$TMPDIR/debug-args/c-args-$$";
open(ARGS, ">$fname") or die "create $fname: $!";
my $str = "set args ";
foreach (@args) {
    # Yet another hack. I haven't figured out a way to pass through newlines
    # embedded within arguments. So far, replacing them with a space has been
    # ok. Obviously, it's not really accurate.
    s/\n/ /g;

    if (/'/) {
        # Problem: whatever gdb does to pass args to the shell doesn't seem
        # to handle backslashed single quotes very well.
        if (/"/) {
            # We're screwed. Just use the backslashes.
            warn "Warning: arguments contain both single- and double-quotes. 'debug' has no way of protecting them properly.\n";
            s/\'/\\\'/g;
            $str .= "'$_' ";
        } else {
            $str .= "\"$_\" ";
        }
    } else {
        s/\'/\\\'/g;
        $str .= "'$_' ";
    }
}

chop($str) if @args;
print ARGS $str, "\n";
my $init_eval = <<"END";
 (insert "source $fname")
 (comint-send-input)
 (insert "cd $ENV{CWD}")
 (comint-send-input)
 (insert "set annotate 1")
 (comint-send-input)
END

# if DBG_DISPLAY is defined in the environment, run the debugged command with
# its DISPLAY set to the current $DISPLAY, if any, but run emacs itself with
# DISPLAY=$DBG_DISPLAY.
if (defined $ENV{DBG_DISPLAY}) {
  my $app_display = $ENV{DISPLAY};
  $ENV{DISPLAY} = $ENV{DBG_DISPLAY};
  $init_eval .= <<"END";
 (insert "set env DISPLAY $app_display")
 (comint-send-input)
END
}

# If in interactive mode, bring up the gdb prompt and allow the user
# to run the program. Otherwise, run immediately.
unless ($opt{interactive}) {
    print STDERR "Running $COMMAND immediately\n";
    $init_eval .= <<"END";
 (insert "run")
 (comint-send-input)
END
}

# If the given pattern is seen in the output, discard this whole debug session
# and exit. We're probably being called by some driver script that will
# keep going.
if ($opt{pattern}) {
  $init_eval .= <<"END";
  (beginning-of-buffer)
  (if (re-search-forward "$opt{pattern}") nil (kill-emacs))
END
# (search-buffer "$opt{pattern}" '(insert "Stopping") '(kill-emacs))
}

if ($debugger eq 'rr') {
    my $taskset = "";
    if (defined $rr_cpu) {
        $taskset = "taskset -c $rr_cpu ";
        $rr_args .= " -u";
    }
    exec(@EMACS, "--eval", "(progn (gud-gdb \"${taskset}rr replay @dbg_args -p $rrpid $rr_args\") $init_eval)");
} elsif ($debugger eq 'record') {
    print "Running " . join(" ", 'rr', 'record', @rr_args, $COMMAND, @args) . "\n";
    system('rr', 'record', @rr_args, $COMMAND, @args);
    exec($0, grep { !/--record/ } @local_args);
} else {
    exec(@EMACS, "--eval", "(progn (gud-gdb \"$gdb --fullname $COMMAND\") $init_eval)");
}

# Copyright 2002-2016 by Steve Fink. All rights reserved.
#
# You may do anything you want with this script, as long as you don't
# use it to directly or indirectly cause harm to any mythical
# creatures. Only real creatures may be harmed by the running of this
# script.
#
# But if you're nice, you'll properly document all the funky options, clean it
# up, and send it back to me at sphink@gmail.com. And you seem like a really
# nice person to me. (I, however, am not; somebody actually did this once, and
# I completely ignored him. But then, he also removed the non-Perl stuff, which
# is probably a good idea -- this ought to be split into language-specific
# scripts. But I use the gdb portion far more than the Perl portion these
# days.)
#
# If someone can make this work as smoothly with Python, that would be awesome.
# So far, though, I'm finding pdb to be pretty limited.
