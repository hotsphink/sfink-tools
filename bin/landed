#!python3

# - Find the most recent public changesets for a given set of local draft changesets.
# - Given two sets of changesets (one public, one draft), hg prune --pair the appropriate ones.
# - Rebase the remaining patches, if any

import argparse
import datetime
import json
import os
import re
import shlex
import subprocess
import sys
import textwrap

from collections import namedtuple

Node = namedtuple("Node", ["rev", "phase", "bug", "num", "reviewers", "key", "desc"])

p = argparse.ArgumentParser(
    usage='landed [options]', description='''
Take a set of draft revisions and find their landed equivalents, then output a
command that prunes the given revisions and sets the landed equivalents as
their successors.

Changesets are matched up by the phabricator revision ID in their comments, if
any. Otherwise, use the first line of their descriptions (with reviewer
metadata stripped).

The usual usage is to just run `landed` with no arguments from a directory
based on a stack of patches, some of which have landed already. That will loop
over all non-public ancestors and scan through mozilla-central to find patches
with matching descriptions that have already landed, and prune the local
patches while setting their successors to their already-landed equivalents.

By default, only the last 2 years of history will be considered (to speed up
the fairly common case where not all changesets are found.)

More complex example: landed -r .^^^::. --user=sfink --branch=autoland

Note that this will not rebase any orphaned patches for you, so if you are
pruning landed patches that have not yet landed descendants, you will need to
rebase them (eg by running `hg evolve` or `hg evolve -a` or whatever.) '''
)

DEFAULT_REVSET = "not public() and ancestors(.)"

g = p.add_argument_group('specifying revisions')
g.add_argument("--former", "--draft", "--local", "--revisions", "-r",
               default=DEFAULT_REVSET,
               help="The revset for the revisions to prune")
g.add_argument("--topic", "-t",
               default=None,
               help="Attempt to prune all revisions in TOPIC")
g.add_argument("--landed", "--public", "--successors", "-s",
               help="The revset for the successor revisions that have landed")
g.add_argument("--user",
               help="A userid to scan to find landed revs")
g.add_argument("--branch", "-b", default='central',
               help="Label of a branch to scan for landed revisions")
g.add_argument("--landed-from",
               help="Parse this file to extract the landed revisions")
g.add_argument("--limit", "-l", type=int,
               help="Do not look more than LIMIT revisions back. Default is to defer to --datelimit.")
g.add_argument("--datelimit", type=int,
               help="Do not look more than LIMIT days back, 0 to remove limit. Default is 2 years.")

p.add_argument("--verbose", "-v", action="store_true",
               help="Verbose output")
p.add_argument("--debug", "-D", action="store_true",
               help="Debugging output")

g = p.add_argument_group('output syntax')
g.add_argument("--numeric", "-n", action="store_true",
               help="Use local numeric changeset numbers instead of hashes")
g.add_argument("--exec", action="store_true", default=None,
               help="Run the command instead of just printing it out")
g.add_argument("--noexec", dest="exec", action="store_false",
               help="Print the command, do not prompt to execute it")

args = p.parse_args()

if args.former != DEFAULT_REVSET and args.topic:
    raise Exception("-r and -t are mutually exclusive")

if args.topic:
    args.former = f"topic('{args.topic}')"

# If no other limit is requested, look back 2 years.
if not args.limit and not args.datelimit:
    args.datelimit = 365 * 2

wrapper = textwrap.TextWrapper(subsequent_indent='      ',
                               width=int(os.getenv('COLUMNS', '80')) - 2)

# Generator that processes the JSON output of `hg log` and yields revisions.
def gen_revisions(lineiter):
    stanza = None
    for line in lineiter:
        if stanza is None:
            assert(line.strip() == "[")
            stanza = ''
        elif line.strip() == "]":
            break
        else:
            stanza += line
            if line.strip("\n") in (" },", " }"):
                try:
                    yield json.loads(stanza.rstrip("\n,"))
                except Exception as e:
                    print("Invalid JSON output from hg log: " + str(e),
                          file=sys.stderr)
                    print(stanza)
                    raise e
                stanza = ''


def display(desc, headerlen):
    # The first line must be shortened by `headerlen` chars.
    header = '.' * headerlen
    return wrapper.fill(header + desc)[headerlen:]


def gather_revisions(revset, limit=None, datelimit=None, query=None):
    revs = {}
    lookup = {}
    if query:
        lookup = {n.key: n for n in query.values()}

    cmd = [
        "hg", "log",
        "-r", revset,
        "-T", "json"
    ]
    if limit:
        cmd.extend(["-l", str(limit)])
    if args.debug:
        print(f"Running {' '.join(shlex.quote(s) for s in cmd)}")

    earliest = None
    if datelimit:
        earliest = datetime.datetime.now() - datetime.timedelta(days=datelimit)
    report_interval = 100 if args.user else 10000
    n = 0
    extra = {}
    if os.name == 'nt':
        # hg is very noisy on Windows when you close its output before it's done.
        extra['stderr'] = subprocess.DEVNULL
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, text=True, encoding='utf-8', **extra)
    try:
        for info in gen_revisions(iter(process.stdout.readline, '')):
            n += 1
            if n % report_interval == 0:
                if query:
                    print(f"..found {len(revs)}/{len(query)} after processing {n} revisions..", end="\r")
                else:
                    print(f"..found {len(revs)} after processing {n} revisions..", end="\r")

            desc = info["desc"]
            m = re.match(r"(.*)[\w\W]*?(?:Differential Revision: .*(D\d+))?$", desc)
            if not m:
                raise Exception(f"invalid format: '{desc}'")
            phabrev = None
            if len(m.groups()) > 1:
                phabrev = m.group(2)

            m = re.match(r"[bB]ug (\d+)[^\w\[]*(.*)", desc)
            if m:
                bug = m.group(1)
            else:
                bug = None

            desc = desc.splitlines()[0]

            m = re.match(r"(.*?)\s*r[?=]([\w., ]+)$", desc)
            if m:
                desc = m.group(1)
                reviewers = m.group(2)
            else:
                reviewers = None

            key = phabrev or desc
            rev = info["node"][:12]
            node = Node(rev,
                        info["phase"], bug, info["rev"], reviewers,
                        key, desc)

            if lookup and key in lookup:
                former = lookup.pop(key)
                if former.bug != node.bug:
                    print(f"\nWarning: landed {node.rev} as bug {node.bug}, draft rev is bug {former.bug}")
                    print("  - " + desc)
                if args.verbose:
                    print(f'\nfound {node.rev} ("{display(desc, 19)}")')
                revs[rev] = node
            elif not lookup:
                revs[rev] = node

            if earliest and datetime.datetime.fromtimestamp(info['date'][0]) < earliest:
                print(f"Terminating search because the date limit was reached after {n} revisions (see --datelimit and/or --limit).")
                break

            if query and not lookup:
                # If we have a query, then lookup will have everything in the
                # query minus what we have found so far. So here, stop early
                # because we found everything.
                break
    except KeyboardInterrupt:
        print()  # Prevent ^C output from mixing with following text.
        pass

    # Probably have \r at end of previous line.
    print()

    if lookup:
        print("Failed to find:")
        for node in lookup.values():
            print(f'  {node.rev} "{display(node.desc, 15)}"')

    return revs


def associate_revisions(former, landed):
    '''Find the matching subsets of the two input dicts, joined on their
    descriptions. Discard any nonmatching elements, and return them as a pair
    of value vectors, ordered by the .num field of the `former`'s values.
    '''

    # I could just sort by changeset number, but this is not robust in
    # situations where earlier patches in a stack were backed out and re-landed
    # while later ones were not. Join them up by description, using the
    # ordering of the revisions to prune.
    #
    # Example: A1 B A1' A2 (where A1' is the backout of A1, and A2 is an updated A1)
    # Sorting by changeset number would produce [B, A2]. When correlating with
    # [landedA, landedB], this would get the matching wrong.
    oldv = sorted(former.values(), key=lambda n: n.num)
    bykey = {n.key: n for n in oldv}
    newv = [n for n in landed.values() if n.key in bykey]
    newv.sort(key=lambda n: bykey[n.key].num)
    old_used = set(bykey[n.key] for n in newv)
    oldv = [n for n in oldv if n in old_used]
    return oldv, newv


if args.verbose:
    print("Gathering revisions to prune...")
former = gather_revisions(args.former)
print(f"Gathered {len(former)} revisions to obsolete")

if args.landed_from:
    pieces = []
    with open(args.landed_from, "rt") as fh:
        for line in fh:
            # a revision url, as if it were cut & paste from an automated bug
            # comment
            m = re.search(r'/rev/(\w+)', line)
            if m:
                pieces.append(m.group(1))
                # a short hash
            else:
                m = re.match(r'^([a-f0-9]{12})$', line)
                if m:
                    pieces.append(m.group(1))
                else:
                    if args.debug:
                        print(f"Ignoring: {line}")
                        landed = gather_revisions("+".join(pieces), args.limit, args.datelimit)
elif args.landed:
    landed = gather_revisions(args.landed, args.limit, args.datelimit)
else:
    print(f"Scanning {args.branch} for matching ancestor revisions...")
    revspec = f"reverse(ancestors({args.branch})) and public()"
    if args.user:
        revspec += f" and user('{args.user}')"
    landed = gather_revisions(revspec, args.limit, args.datelimit, query=former)
    print(f"Found {len(landed)}/{len(former)} successor revisions")
    if not landed:
        sys.exit(1)

if args.debug:
    print(f"old = {former.keys()}\n")
    print(f"new = {landed.keys()}\n")

oldv, newv = associate_revisions(former, landed)

if any(n.phase == 'public' for n in oldv):
    print("This command is only for obsoleting draft revs")
    sys.exit(1)

if any(n.phase != 'public' for n in newv):
    print("Cannot obsolete public revs")
    sys.exit(1)

failed = False
for i in range(len(oldv)):
    old = oldv[i]
    new = newv[i]
    print(f"  {old.rev} -> {new.rev} {new.desc}")
    olddesc = re.sub(r' r=\S+', '', old.desc)
    newdesc = re.sub(r' r=\S+', '', new.desc)
    if olddesc != newdesc:
        print(f"For now, cowardly refusing to obsolete\n  {display(old.desc, 2)}\nwith\n  {display(new.desc, 2)}\nbecause the descriptions are not identical.")
        failed = True

if failed:
    sys.exit(1)


def vec2revset(vec):
    seq = []
    for node in vec:
        if not seq:
            seq.append([node, node])
        elif int(node.num) == int(seq[-1][1].num) + 1:
            seq[-1][1] = node
        else:
            seq.append([node, node])

    if args.numeric:
        return '+'.join([first.num if first == last
                         else f"{first.num}:{last.num}"
                         for first, last in seq])
    else:
        return '+'.join([first.rev if first == last
                         else f"{first.rev}:{last.rev}"
                         for first, last in seq])


oldrevset = vec2revset(oldv)
newrevset = vec2revset(newv)

print()
cmd = ["hg", "prune", "--pair", "-r", oldrevset, "--succ", newrevset]
print("COMMAND: " + " ".join(cmd))
if args.exec is None:
    args.exec = input("Run the above command? (y/n) ") == "y"

if args.exec:
    subprocess.check_call(cmd)
else:
    print("(Copy & paste the above command, or rerun with --exec)")
