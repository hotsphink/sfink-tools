#!/usr/bin/perl

# 1. em foo.txt:33 will run emacs +33 foo.txt
#    so will em foo.txt:33: (easier cut & paste of trailing colon for error messages)
#    and foo.txt will be found anywhere in the current hg tree (if not in cwd)
# 2. em with no args will run emacs on the files changed in the cwd, or if none, then
#    by the cwd's parent rev
# 3. em 01faf51a0acc will run emacs on the files changed by that rev.
# 4. em foo.txt.rej will run emacs on both foo.txt and foo.txt.rej, but at the lines
#    containing the first patch hunk and the line number of the original that it
#    applies to (ok, so this is probably where this script jumped the shark.)

use strict;
use warnings;

use File::Basename qw(basename);

my $ROOTDIR;
my $TOPROOTDIR;

my @to_edit; # [ <file, lineno> ]
my $magic = 0;
my $revision;
my $base = basename($0);
my $editor = ($base eq 'vs' ? 'vscode' : $ENV{EDITOR}) || "emacs";

my $verbose;
my $use_client;

my @args;
my $i = 0;
while ($i < @ARGV) {
    if ($ARGV[$i] eq '-v' || $ARGV[$i] eq '--verbose') {
        $verbose = 1;
    } elsif ($ARGV[$i] eq '-c' || $ARGV[$i] eq '--client') {
        $use_client = 1;
    } elsif ($ARGV[$i] eq '-r' || $ARGV[$i] eq '--revision') {
        $revision = $ARGV[++$i] or die "missing revision\n";
    } elsif ($ARGV[$i] eq '-e' || $ARGV[$i] eq '--editor') {
        $editor = $ARGV[++$i] or die "missing editor\n";
    } else {
        push @args, $ARGV[$i];
    }
} continue {
    ++$i;
}

ARG: for my $arg (@args) {
    my $lineno;
    if ($arg =~ /^[-+]/) {
	push @to_edit, [ $arg ];
        next;
    }

    # Check for filename:lineno or filename:lineno:colno, with optional
    # trailing colon.
    if ($arg =~ /(.*?):(\d+)(:\d+)?:?$/) {
        # Might be filename:77 or filename:77: (the latter comes from a simple
        # copy/paste of an error message). Convert to opening the appropriate
        # line.
        print "Command line contained filename:lineno, adding +$2\n"
            if $verbose;
	$lineno = $2;
        $arg = $1;
    }

    # Check for a path relative to the hg root, or failing that, anywhere in
    # the repo.
    if (! -r $arg) {
        chomp($ROOTDIR = $TOPROOTDIR ||= qx(hg root));
        if (-r "$ROOTDIR/$arg") {
            $arg = "$ROOTDIR/$arg";
        } else {
	    chomp(my $path = qx(hg files "relglob:$arg"));
	    if ($path ne '' && -r $path) {
		$arg = $path;
	    } elsif ($arg =~ /^[\da-f]{1,40}$/) {
		$revision = $arg;
		next;
	    }
        }
    }

    # Check for a reject file.
    if ($arg =~ /(.*)\.rej$/) {
        print "Found reject file\n"
            if $verbose;
        my $orig = $1;
        open(my $fh, "<", $arg) or die "open $arg: $!";
        my $hunkstart;
        my $context = 0;
        while(<$fh>) {
            if (/^\@\@ -(\d+)/) {
                $hunkstart = $1;
            } elsif (defined($hunkstart)) {
                if (/^ /) {
                    ++$context;
                } else {
                    # Open the original file at the first changed line number,
                    # and the reject file at the first hunk.
		    push @to_edit, [ $orig, $hunkstart + $context ];
		    push @to_edit, [ $arg, $context + 3 + 1 ];
                    next ARG;
                }
            }
        }

	push @to_edit, [$orig], [$arg, $lineno]; # $lineno is probably undef
        $magic = 1;
    } else {
	push @to_edit, [ $arg, $lineno ];
    }
}

if (@to_edit == 0) {
    chomp($ROOTDIR = $TOPROOTDIR ||= qx(hg root));

    my @files;

    # If no revision was given, check working directory.
    if (! defined $revision) {
        print "Looking for changes in working directory...\n"
            if $verbose;
        chomp(@files = qx(hg diff | diffstat -l -p1));
    }

    if (@files) {
        push @to_edit, map { ["$ROOTDIR/$_"] } @files;
    } else {
        $revision //= '.';
        print "Using changes from $revision\n"
            if $verbose;
        open(my $diff, "hg export --hidden $revision |");
        my $curfile;
        my $startline;
        while(<$diff>) {
            chomp;
            if (m!^\+\+\+ b/(.*)!) {
                $curfile = $1;
            } elsif ($curfile && /^@@ -\d+,\d+ \+(\d+)/) {
                $startline = $1;
                print "Found diff chunk starting at +$1, scanning...\n"
                    if $verbose;
            } elsif ($curfile && defined $startline) {
                if (/^[\-+]/) {
                    print "found first change at line $startline\n"
                        if $verbose;
		    push @to_edit, [ "$ROOTDIR/$curfile", $startline ];
                    undef $startline;
                    undef $curfile;
                } else {
                    $startline++;
                }
            }
        }
    }
}

my $cmd;
my @cmd_args;
if ($editor eq 'emacs') {
    $cmd = $use_client ? "emacsclient" : "emacs";
    foreach (@to_edit) {
	my ($file, $lineno) = @$_;
	push @cmd_args, "+$lineno" if $lineno;
	push @cmd_args, $file;
    }
} elsif ($editor eq 'vscode' || $editor eq 'code') {
    $cmd = 'code';
    push @cmd_args, '-r';
    foreach (@to_edit) {
	my ($file, $lineno) = @$_;
	push @cmd_args, "-g", join(":", grep { $_ } $file, $lineno);
    }
}

print "Running: $cmd @cmd_args\n" if $magic or $verbose;
exec($cmd, @cmd_args);
