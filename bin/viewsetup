#!/usr/bin/python

import argparse
import json
import os
import re
import subprocess

from collections import defaultdict

KiB = 2 ** 10
MiB = 2 ** 20
GiB = 2 ** 30

allowed_actions = [
    'create-mapping',
    'create-md',
    'create-vmdk',
    'list',
    'remove',
    'all'
]


def abort(msg):
    import sys
    print(msg, file=sys.stderr)
    sys.exit(1)


def get_disks():
    lsblk = json.loads(subprocess.check_output(["lsblk", "-J"], text=True))
    return [
        d['name']
        for d in lsblk['blockdevices']
        if d['type'] == 'disk' and d['mountpoint'] is None
    ]


disks = get_disks()
disk = None if len(disks) > 1 else "/dev/" + disks[0]
CFG_DIR = os.path.join(os.getenv("HOME"), ".config", "diskviews")

parser = argparse.ArgumentParser('setup a view of a disk')
parser.add_argument('--action', '--actions', default='create-md',
                    help='comma-separated actions to perform, from: ' + ' '.join(allowed_actions))
parser.add_argument('--map', action='store_const', dest='action', const='create-mapping',
                    help='alias for --action=create-mapping')
parser.add_argument('--vmdk', action='store_const', dest='action', const='create-vmdk',
                    help='alias for --action=create-vmdk')
parser.add_argument('--remove', action='store_const', dest='action', const='remove',
                    help='alias for --action=remove')
parser.add_argument('--list', action='store_const', dest='action', const='list',
                    help='alias for --action=list')
parser.add_argument('--device', '-d', default=disk,
                    help='(whole) disk to create a view of')
parser.add_argument('--name', '-n', default=None, dest='_name', metavar='NAME',
                    help='name to use in generated files, defaults to basename of device')
parser.add_argument('--dir', '-o', default=None,
                    help=f"directory storing view configuration dirs, default is {CFG_DIR}/(name)")
parser.add_argument('--force', '-f', action='store_true', default=False,
                    help='overwrite existing files')
parser.add_argument('--auto', '-a', action='store_true', default=False,
                    help='choose default disposition for all partitions')
parser.add_argument('name', nargs='?',
                    help='name of view to create or access (same as --name NAME)')

args = parser.parse_args()

if args.name is None:
    args.name = args._name

if args.name is None and args.dir is not None:
    args.name = os.path.basename(args.dir)

if args.name is None and args.device is not None:
    args.name = os.path.basename(args.device)

if args.dir is None and args.name is not None:
    args.dir = os.path.join(CFG_DIR, args.name)

# If there is already a slices file, use it to set the device.
if args.device is None and args.dir is not None and os.path.exists(args.dir):
    with open(os.path.join(args.dir, 'slices.json')) as fh:
        data = json.load(fh)
        args.device = data['device']
        if args.name is None:
            args.name = os.path.basename(args.device)

if args.device is None:
    diskdevs = ' '.join("/dev/" + d for d in disks)
    abort(f"Use -d (--device) to select from available disks: {diskdevs}")

if args.dir is None:
    args.dir = os.path.join(CFG_DIR, args.name)

actions = set(args.action.split(','))
for action in actions:
    if action not in set(allowed_actions):
        raise Exception(f"invalid action '{action}'")

dm_dev = f"/dev/mapper/{args.name}_view"
print(f"Using {dm_dev} for device path")
slices_filename = os.path.join(args.dir, 'slices.json')


def run(cmd, quiet=False, output=False):
    if not quiet:
        print(" ".join(cmd))
    if output:
        return subprocess.check_output(cmd, text=True)
    else:
        return subprocess.check_call(cmd)


def read_mtab():
    mounts = {}
    with open("/etc/mtab", "rt") as fh:
        for line in fh.readlines():
            device, mountpoint, fstype, flags, n1, n2 = line.rstrip().split(" ")
            if device == fstype:
                continue  # Does not use a device eg proc
            mounts[device] = {
                'mountpoint': mountpoint,
                'fstype': fstype,
                'flags': set(flags.split(','))
            }
    return mounts


def read_partitions(device):
    mounts = read_mtab()
    info = defaultdict(dict)
    fdisk = json.loads(run(["sudo", "sfdisk", "-J", device], quiet=True, output=True))
    info['unit'] = fdisk['partitiontable']['unit']
    if info['unit'] != 'sectors':
        raise Exception(f"script only handles units of sectors, not {info['unit']}")
    info['sector-size'] = fdisk['partitiontable']['sectorsize']
    for p in fdisk['partitiontable']['partitions']:
        part = {
            'device': p['node'],
            'start': p['start'],
            'size': p['size'],
            'end': p['start'] + p['size'],
            'gptname': p.get('name'),
            # FIXME: Have not looked at example with multiple attributes.
            'attrs': set(p.get('attrs', '').split(',')),
            'mount': mounts.get(p['node']),
        }
        info['partitions'][p['node']] = part

    for line in run(["sudo", "sfdisk", "-l", device], quiet=True, output=True).splitlines():
        if m := re.match(r'(/dev/\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s*(.*)', line):
            dev, start, end, sectors, size, type_ = m.groups()
            info['partitions'][dev]['type'] = type_

    info['end'] = int(
        run(['sudo', 'blockdev', '--getsz', device], quiet=True, output=True).rstrip()
    )

    info['ordered-partitions'] = sorted(
        info['partitions'].keys(),
        key=lambda k: info['partitions'][k]['start']
    )

    return info


def check_new_file(filename):
    if os.path.exists(filename) and not args.force:
        raise Exception(f"{filename} already exists, use -f (--force) to overwrite")


def copy_chunk(src, dst, offset, count, blocksize):
    check_new_file(dst)
    run([
        'sudo',
        'dd',
        f"if={src}",
        f"of={dst}",
        f"bs={blocksize}",
        f"count={count}",
        f"skip={offset}",
        'conv=sparse',
    ])


def human_bytes(b):
    if b < 4000:
        return f"{b} bytes"
    b = b / 1024
    if b < 4000:
        return f"{b:.1f} KB"
    b = b / 1024
    if b < 4000:
        return f"{b:.1f} MB"
    b = b / 1024
    if b < 4000:
        return f"{b:.1f} GB"
    b = b / 1024
    return f"{b:.1f} TB"


def guess_disposition(part):
    known_types = {
        'efi system partition': 'system partition',
        'microsoft reserved partition': 'windows system partition',
    }

    known = known_types.get((part['gptname'] or '').lower())
    if known:
        return ('clone', known)

    if (part['gptname'] or '').lower() == 'basic data partition':
        if 'RequiredPartition' in part.get('attrs', set()):
            return ('clone', 'Windows partition with RequiredPartition attr')

    mount = part.get('mount')
    if mount and mount['mountpoint'].startswith('/boot'):
        return ('clone', f"cloned {mount['mountpoint']} partition")

    if mount:
        return ('mask', "mounted partition, mask with zeroes")

    if 'microsoft' in part.get('type', '').lower():
        return ('expose', "Windows partition to expose")

    if 'lvm' in part.get('type', '').lower():
        return ('mask', "LVM partition, masking it off")

    if part.get('gptname'):
        return ('expose', "assumed to be Windows or system partition to expose")

    return ('mask', "other partition to mask with zeroes")


def make_zeroes(dst, count, blocksize):
    check_new_file(dst)
    run([
        'sudo',
        'dd',
        "if=/dev/zero",
        f"of={dst}",
        f"bs={blocksize}",
        "count=0",
        f"seek={count}",
        'conv=sparse',
    ])


def describe(names):
    names = [os.path.basename(n) for n in names]

    # If there is a device and its partitions, tack the partition indicators
    # onto the device (eg /dev/nvme0n1,/dev/nvme0n1p1,/dev/nvme0n1p2 ->
    # /dev/nvme0n1p1p2).
    shortest = sorted(names, key=lambda s: len(s))[0]
    if m := re.search(r'(p\d+)$', shortest):
        shortest = shortest[0:-len(m.group(1))]
    parts = []
    for name in names:
        if name == shortest:
            # Just drop the main device; it'll be a gap.
            continue
        if not name.startswith(shortest):
            parts = None
            break
        rest = name[len(shortest):]
        if re.search(r'p\d+$', rest):
            parts.append(rest)
    if parts is not None:
        return shortest + "".join(parts)
    else:
        return ",".join(names)


if 'create-mapping' in actions or 'all' in actions:
    info = read_partitions(args.device)
    maskid = [0]

    def process_range(slices):
        disposition = slices[0]['disposition']
        if disposition == 'gap' and len(slices) > 1:
            disposition = slices[0]['disposition'] = slices[1]['disposition']

        sectors = slices[-1]['end'] - slices[0]['start']

        if disposition == 'mask':
            filename = os.path.join(args.dir, f"zero{maskid[0]}.dat")
            maskid[0] += 1
            make_zeroes(filename, sectors, info['sector-size'])
            slices[0]['filename'] = filename

        elif disposition in ('clone', 'gap'):
            name = describe([slice['device'] for slice in slices])
            filename = os.path.join(args.dir, f"{name}.dat")
            copy_chunk(args.device, filename, slices[0]['start'], sectors, info['sector-size'])
            slices[0]['filename'] = filename

        else:
            assert disposition == 'expose'
            slices[0]['filename'] = slices[0]['device']

        slices[-1]['range-filename'] = slices[0]['filename']

    def make_files_for_slices(slices):
        # Merge consecutive slices with the same non-expose disposition.
        range = [slices[0]]
        for slice in slices[1:]:
            disposition = slice['disposition']
            if range[0]['disposition'] == disposition and disposition != 'expose':
                range.append(slice)
            elif range[0]['disposition'] == 'gap' and disposition in ('clone', 'mask'):
                # Attach gap to next range.
                range[0]['disposition'] = disposition
                range.append(slice)
            elif disposition == 'gap' and range[-1]['disposition'] != 'expose':
                # Special case: a gap after an expose is necessary for
                # alignment, and cannot be combined.
                if range[-1]['disposition'] == 'expose':
                    process_range(range)
                    range = [slice]
                    slice['disposition'] = 'clone'
                else:
                    # Attach gap to previous range.
                    slice['disposition'] = range[-1]['disposition']
                    range.append(slice)
            else:
                process_range(range)
                range = [slice]
        if range:
            process_range(range)

    os.makedirs(args.dir, exist_ok=True)
    check_new_file(slices_filename)

    mounts = read_mtab()
    slices = []
    prev_end = 0
    for device in info['ordered-partitions']:
        part = info['partitions'][device]
        disposition, why = guess_disposition(part)

        typestr = "" if not part.get('type') else " " + part['type']
        print(f"{device}:{typestr}")
        if mounts.get(device):
            mount = mounts[device]['mountpoint']
            print(f"  {mounts[device]['fstype']} filesystem mounted at {mount}")
        bytes = part['size'] * info['sector-size']
        print(f"  sectors {part['start']}-{part['end']-1}, {human_bytes(bytes)}")
        print(f"  GPT partition name: {part['gptname']}")
        if args.auto:
            print(f"  automatically chosen disposition is {disposition}: \"{why}\"")
        else:
            print(f"  default disposition is {disposition}: \"{why}\"")
        while not args.auto:
            answer = input(f"disposition (one of expose, mask, clone) (default {disposition})> ")
            if answer != "":
                if answer in ('expose', 'mask', 'clone'):
                    disposition = answer
                    break
                else:
                    print("invalid disposition")
            else:
                break
        print()

        gap = part['start'] - prev_end
        if gap > 0:
            slices.append({
                'disposition': 'gap',
                'description': 'gap between partitions',
                'device': args.device,
                'sectors': gap,
                'size': human_bytes(gap * info['sector-size']),
                'start': prev_end,
                'end': part['start'],
                'type': 'file'
            })

        slices.append({
            'disposition': disposition,
            'device': device,
            'sectors': part['size'],
            'bytes': part['size'] * info['sector-size'],
            'start': part['start'],
            'end': part['end'],
        })

        if disposition == 'expose':
            slices[-1].update({
                'description': f"exposed partition {device}",
                'device': device,
                'type': 'partition',
            })
        elif disposition == 'mask':
            slices[-1].update({
                'description': f"masked-off partition {device}",
                'type': 'file',
            })
        elif disposition == 'clone':
            slices[-1].update({
                'description': f"partition {device} cloned to a file",
                'type': 'file',
            })
        else:
            raise Exception(f"unknown disposition '{disposition}'")

        prev_end = part['end']

    gap = info['end'] - slices[-1]['end']
    if gap > 0:
        slices.append({
            'disposition': 'clone',
            'description': 'gap after last partition, containing master GPT',
            'device': args.device,
            'sectors': gap,
            'bytes': gap * info['sector-size'],
            'start': slices[-1]['end'],
            'end': info['end'],
            'type': 'file'
        })

    make_files_for_slices(slices)

    with open(slices_filename, "w") as fh:
        fh.write(json.dumps({'device': args.device, 'slices': slices}, indent=4))
    print(f"Wrote {slices_filename}")

if 'create-md' in actions or 'all' in actions:
    with open(slices_filename, 'r') as fh:
        data = json.load(fh)
        slices = data['slices']

    if os.path.exists(dm_dev):
        abort(f"{dm_dev} already exists")

    print("Setting up loopback devices")
    loopbacks = {}
    for slice in slices:
        if slice['type'] == 'file' and slice.get('filename'):
            loop = run([
                'sudo',
                'losetup',
                '-f',
                '--show',
                slice['filename']
            ], output=True).rstrip()
            slice['loopback'] = loop
            loopbacks[slice['filename']] = loop

    dmconfig_filename = os.path.join(args.dir, "dmconfig.txt")
    with open(dmconfig_filename, "wt") as fh:
        offset = 0
        for slice in slices:
            filename = slice.get('range-filename')
            if filename is None:
                continue
            dev = loopbacks.get(filename, filename)
            sectors = slice['end'] - offset
            print(f"{offset} {sectors} linear {dev} 0", file=fh)
            offset = slice['end']
    print(f"Wrote {dmconfig_filename}")

    try:
        run(['sh', '-c', f"sudo dmsetup create {args.name}_view < {dmconfig_filename}"])
    except Exception:
        run(['sudo', 'losetup', '-d'] + list(loopbacks.values()))
        run(['sudo', 'dmsetup', 'remove', f"{args.name}_view"])
        raise
    user = subprocess.check_output(['id', '-nu'], text=True).rstrip()
    group = subprocess.check_output(['id', '-ng'], text=True).rstrip()
    run(['sudo', 'chown', f"{user}:{group}", dm_dev])
    run(['sudo', 'chmod', '0666', dm_dev])

    orig_size = run(['sudo', 'blockdev', '--getsz', args.device], output=True).strip()
    new_size = run(['sudo', 'blockdev', '--getsz', dm_dev], output=True).strip()

    print(f"Size of original, in sectors: {orig_size}")
    print(f"Size of new device, in sectors: {new_size}")

if 'create-vmdk' in actions or 'all' in actions:
    vmdk_filename = os.path.join(args.dir, f"{args.name}.vmdk")
    run([
        'VBoxManage', 'internalcommands', 'createrawvmdk',
        '-filename', vmdk_filename, '-rawdisk', dm_dev
    ])


def get_devices(dmfile):
    devices = []
    output = run(['sudo', 'dmsetup', 'deps', dm_dev], output=True)
    for major, minor in re.findall(r'\((\d+), (\d+)\)', output):
        major = int(major)
        minor = int(minor)
        if major == 7:
            devices.append(f"/dev/loop{minor}")
        else:
            found = False
            for ent in os.listdir("/dev"):
                path = f"/dev/{ent}"
                st = os.lstat(path)
                if major == os.major(st.st_rdev) and minor == os.minor(st.st_rdev):
                    devices.append(path)
                    found = True
                    break
            if not found:
                devices.append(f"DEV[{major},{minor}]")
    return devices


if 'list' in actions or 'all' in actions:
    for device in get_devices(dm_dev):
        if device.startswith('/dev/loop'):
            run(['losetup', device], quiet=True)
        else:
            print(device)

if 'remove' in actions:
    devices = get_devices(dm_dev)
    run(['sudo', 'dmsetup', 'remove', dm_dev])
    for device in devices:
        if device.startswith('/dev/loop'):
            run(['sudo', 'losetup', '-d', device])
