#!/usr/bin/env python

# This is a snapshot of http://people.mozilla.com/~tschneidereit/wig
# Please get the latest version from there. The old 'wig' is at
# http://people.mozilla.com/~sfink/data/oldwig

import argparse
import fnmatch
import os
import sys

from distutils.spawn import find_executable
from glob import glob
from subprocess import check_output

parser = argparse.ArgumentParser(description="""
Uses 'wiggle' to apply the reject files left by conflicts during 
mercurial merges to your source tree run it from anywhere underneath 
the hg root; the main point of this script is to figure out the 
right path and call wiggle with the correct magic options.

Example:
~/moz/js/src% wig js/src/
wiggle --replace js/src/jsfun.cpp js/src/jsfun.cpp.rej
1 unresolved conflict
4 already-applied changes ignored
wiggle --replace js/src/jsscript.h js/src/jsscript.h.rej
2 already-applied changes ignored

The 'unresolved conflict' means that wiggle failed to find a way to
cram the patch in, and you'll need to look at js/src/jsfun.cpp and
search for '<<<<' to find the conflict markers.

wiggle doesn't fail very often, unless there's a real conflict.
It can be a little overeager, and in particular it's easy to get
a function duplicated.

Just run |hg diff| after you're done wiggling, and it'll show you
just the changes that wiggle did (plus any hand editing). Usually
this is much smaller than the original patch, assuming most of it
applied ok.

The reject arguments can be either *.rej files, the names of files
rejects are to be wiggled into, or directories containing rejects.

If given directories, wig recurses into the sub-directories to
find as many rejects as possible. This can be changed using the 
-s/--shallow option.

For successful wiggles, wig deletes the *.porig and *.rej files.
This can be prevented using the -k/--keep-backup option.
""", formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('reject', nargs='+',
                   help='Files or directories to wiggle')
parser.add_argument('-s', '--shallow', action='store_const', const=True,
                   help="Don't recurse into sub-directories")
parser.add_argument('-k', '--keep-backup', action='store_const', const=True,
                   help="Don't delete *.porig and *.rej files upon completion")
args = parser.parse_args()

if not find_executable('wiggle'):
  exit("I can't find wiggle. Please don't tell me you didn't even install it.\nYou can find it at http://neil.brown.name/wiggle/, you know?")

def processFile(path):
  path = os.path.splitext(path)[0]
  filename = os.path.relpath(path)
  if not os.path.exists(filename):
    exit("Error: can't find '%s'" % filename)
  if not os.path.exists(filename + '.rej'):
    exit("Error: can't find '%s'" % filename + '.rej')
  print "wiggle --replace %s %s" % (filename, filename + '.rej')
  os.system("wiggle --replace '%s' '%s'" % (path, path + '.rej'))

# recursively find all rejects
targets = []
root = None
for reject_arg in args.reject:
  reject = os.path.join(os.getcwd(), reject_arg)
  if not os.path.exists(reject):
    if root is None:
      root = check_output(['hg', 'root']).strip()
    reject = os.path.join(root, reject_arg)
    if not os.path.exists(reject):
      print "Error: can't find '%s'" % reject_arg
      exit(2)

  if os.path.isdir(reject):
    if args.shallow:
      for filename in glob(reject + '/*.rej'):
        targets.append(os.path.abspath(filename))
    else:
      for root, dirs, files in os.walk(reject):
        for filename in fnmatch.filter(files, '*.rej'):
          targets.append(os.path.abspath(root + '/' + filename))

  else:
    if os.path.splitext(reject)[1] != '.rej':
      reject += '.rej'
    targets.append(reject)

# prune duplicates
seen = set()
targets = [ x for x in targets if x not in seen and not seen.add(x)]

# wiggle
for target in targets:
  processFile(target)
  if not args.keep_backup:
    os.remove(target)
    os.remove(os.path.splitext(target)[0] + '.porig')



# Note: I'm 100% convinced this is a very long-winded implementation. 
# Consider the roughly equivalent, if less flexible, bash version:
# dir=$(pwd)
# unset a i
# while IFS= read -r -d $'\0' file; do
#     f=$dir/${file%.rej}
#     rm -f "$f.porig"
#     echo wiggling "$f"
#     wiggle --replace "$f" "$f.rej"
#     rm -f "$f.porig" "$f.rej"
# done < <(find . -name \*.rej -print0)
