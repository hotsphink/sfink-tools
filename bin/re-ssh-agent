#!/usr/bin/perl -w

my $pidof = "/bin/pidof";
$pidof = "/sbin/pidof" if ! -x $pidof;

chomp(my $pids = `$pidof ssh-agent`);
my @pids = split(/ /, $pids);
if (@pids == 0) {
  exec("/usr/bin/ssh-agent") or die "Cannot run ssh-agent";
} elsif (@pids > 1) {
  print STDERR "Multiple ssh-agent processes found.\n";
}

my $pid = $pids[0];
print "SSH_AGENT_PID=$pid; export SSH_AGENT_PID\n";

my @socks = glob("/tmp/ssh-*/agent.*");
my $sock;

if (@socks == 1) {
    ($sock) = @socks;
} elsif (@socks > 1) {
    SOCKSEARCH: foreach (@socks) {
        my ($sock_pid) = /agent.(\d+)$/;
        if (abs($pid - $sock_pid) <= 1) {
            $sock = $_;
            last SOCKSEARCH;
        } else {
            # Check whether candidate socket pid is the process listed
            # after --exit-with-session
            my $cmd = qx(cat /proc/$pid/cmdline);
            my @cmd = split(/\0/, $cmd);
            for (0 .. $#cmd) {
                if ($cmd[$_] eq '--exit-with-session') {
                    my $control_cmd = $cmd[$_+1];
                    if (qx(ps ww $sock_pid) =~ /\Q$control_cmd\E/) {
                        $sock = $_;
                        last SOCKSEARCH;
                    }
                }
            }

            # $sock_pid is ancestor of $pid?
            my $p = $pid;
            while ($p != 1) {
                if ($p == $sock_pid) {
                    $sock = $_;
                    last SOCKSEARCH;
                }
                if (qx(ps --no-heading -o ppid $p) =~ /(\d+)/) {
                    $p = $1;
                } else {
                    last;
                }
            }
        }
    }
}

if (defined $sock) {
  print "SSH_AUTH_SOCK=$sock; export SSH_AUTH_SOCK\n";
} else {
  die "Unable to find socket";
}
