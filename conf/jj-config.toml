# Note: this config file contains no user-specific config.
# I put that in a separate user.toml file, and made my
# ~/.config/jj/config.toml be a directory containing
# user.toml and this file. A cleaner way would be to set
# JJ_CONFIG=$HOME/.config/jj.d and put the files there.

[ui.diff]
format = "git"

[git]
subprocess = true

[experimental-advance-branches]
enabled-branches = ["glob:T.*"]

[revset-aliases]
topics = 'visible_heads() ~ immutable()'
current = 'latest((@ | @-) & ~empty())'
'closest_bookmark(x)' = 'heads(::x & bookmarks())'

branchroots = 'trunk()+ & trunk()::bookmarks(glob:"T.*")'
'branchroot(x)' = 'trunk()+ & trunk()::bookmarks(x)'

# non-trunk ancestors of T.foo
'topic(x)' = 'trunk()+::x'

# does not work! T.a ... T.b ... T.c ... trunk. xtopic(T.b) needs to exclude T.b+::T.a without excluding T.c::T.b.
'other_topics(x)' = 'bookmarks(glob:"T.*") ~ x'
'exclusive_topic(x)' = 'topic(x) ~ trunk()::other_topics(x)'
'xtopic(x)' = 'exclusive_topic(x)'

# These are not quite the same.
'why_immutable(r)' = '(r & immutable()) | roots(r:: & immutable_heads())'
'why_in(r, domain)' = '(r & domain) | roots(r:: & heads(domain))'

[template-aliases]
brief = 'brief_line ++ "\n"'

brief_line = '''
separate(" ",
  format_short_change_id_with_hidden_and_divergent_info(self),
  format_short_commit_id(commit_id),
  self.bookmarks(),
  self.tags(),
  self.working_copies(),
    if(description,
      description.first_line(),
      label(if(empty, "empty"), description_placeholder),
    ),
)
'''

[aliases]
lg = ["log", "-T", "brief"]

lst = ["log", "-T", "brief", "-r", "topics", "--no-graph"]

book = ["bookmark"]

ls = ["log", "-r", "withparents(::@ ~ immutable())"]

# FIXME: This only applies to @.
reformat = ["util", "exec", "--", "bash", "-c", """
    cd $(jj root)
    mach clang-format -p $(jj diff -r current | diffstat -p1 -l)
""", ""]

try = ["util", "exec", "--", "bash", "-c", """
    set -euo pipefail
    jj new --quiet
    mach try "$@" || true
    jj prev --edit --quiet
""", ""]


phab = ["util", "exec", "--", "bash", "-c", """
    REV="${1:-@}"
    URL=$(jj log -r"$REV" -T "description" | perl -lne 'print $1 if /Differential Revision: (https.+)/')
    if [[ -n "$URL" ]]; then
        echo "Opening $URL"
        code --openExternal "$URL"
    else
        echo "Unable to find phabricator revision URL for $REV" >&2
    fi
""", ""]

# Note to self: use `jj new` to make an empty commit first.
#
# Massively overcomplicated? Could this be done with template magic?
# Oh, hm... it looks like this could be dropped in favor of
# https://github.com/erichdongubler-mozilla/review/pull/1
#
# moz-phab will request confirmation before doing anything, so
# there is no need for a --dry-run flag.
#
# Use `jj yeet --debug` to see the input lines being processed.
#
# Extra command line options get passed to moz-phab. This only looks
# at a linear stack of patches ending in @-
#
yeet = ["util", "exec", "--", "python", "-c", '''
if True:  # indent
    import re
    import sys
    from subprocess import run, Popen, PIPE

    # Skip -c and empty string, which probably should not be there.
    args = sys.argv[1:]
    debug = "--debug" in args
    args = [a for a in args if a != "--debug"]

    run(["git", "checkout", "-B", "moz-phab"])

    bug = False
    upstream = None
    cmd = ["jj", "log", "-r", "trunk()::moz-phab ~ trunk()", "-T", "commit_id.short()++' '++change_id.shortest()++' '++description.first_line()++'\n'", "--no-graph"]
    process = Popen(cmd, stdout=PIPE, text=True)
    keep = []
    earliest = None
    latest = None  # aka @-
    for line in process.stdout:
        line = line.strip()
        if debug:
            print(f"line is <<{line}>>")
        rev, change, desc = line.split(' ', 2)
        latest = latest or change
        upstream = rev
        rev_bug = None
        if m := re.match(r'[bB]ug (\d+)', desc):
            rev_bug = m.group(1)

        # If not grabbing the first rev, and either the bug number changed or
        # we went from None (no bug) -> None, done.
        if bug is not False and ((bug != rev_bug) or (rev_bug is None)):
            break
        bug = rev_bug
        keep.append(line)
        earliest = change

    if bug is None:
        print(f"submitting rev with no bug number with upstream {upstream}")
    else:
        print(f"submitting revs for bug {bug} with upstream {upstream}")
    for line in keep:
        print(f"  {line}")

    cmd = ["moz-phab", "submit", "--upstream", upstream, earliest, latest] + args
    print(" ".join(["Running:"] + cmd))
    run(cmd)
''']
