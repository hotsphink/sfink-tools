# Note: this config file contains no user-specific config.
# I put that in a separate user.toml file, and made my
# ~/.config/jj/config.toml be a directory containing
# user.toml and this file. A cleaner way would be to set
# JJ_CONFIG=$HOME/.config/jj.d and put the files there.

[ui]
#diff.format = "git"
diff-formatter = ":git"

[git]
change_id = true

[snapshot]
auto-track = 'all() ~ glob:"**/*.sf.txt"'

[experimental-advance-branches]
enabled-branches = ["glob:GH.*"]

[revsets]
# This revset is also used to determine what to use for the shortest unique
# prefixes of change ids.
log = 'ancestors(reachable(@, mutable()), 2)'

[revset-aliases]
current = 'latest((@ | @-) & ~empty())'
'closest_bookmark(x)' = 'heads(::x & bookmarks())'

junk = '(mutable() & empty()) ~ working_copies() ~ parents(..) ~ bookmarks()'

nmerges = 'bookmarks(glob:"G.*")'

branchroots = 'trunk()+ & trunk()::bookmarks(glob:"T.*")'
'branchroot(x)' = 'trunk()+ & trunk()::bookmarks(x)'

# non-trunk ancestors of T.foo
'topic(x)' = 'trunk()+::x'

'mut(s)' = 'mutable() & description(s)'

'bug(s)' = 'description("Bug ") & description(s)'
'mbug(s)' = 'mutable() & description("Bug ") & description(s)'

# does not work! T.a ... T.b ... T.c ... trunk. xtopic(T.b) needs to exclude T.b+::T.a without excluding T.c::T.b.
'other_topics(x)' = 'bookmarks(glob:"T.*") ~ x'
'exclusive_topic(x)' = 'topic(x) ~ trunk()::other_topics(x)'
'xtopic(x)' = 'exclusive_topic(x)'

# These are not quite the same.
'why_immutable(r)' = '(r & immutable()) | roots(r:: & immutable_heads())'
'why_in(r, domain)' = '(r & domain) | roots(r:: & heads(domain))'

[templates]
draft_commit_description = '''
    concat(
    coalesce(description, "\n"),
    surround(
        "\nJJ: This commit contains the following changes:\n", "",
        indent("JJ:     ", diff.stat(72)),
    ),
    "\nJJ: ignore-rest\n",
    diff.git(),
    )
'''

[template-aliases]
brief = 'brief_line ++ "\n"'

# Removed:
#  format_short_commit_id(commit_id),

brief_line = '''
separate(" ",
  format_short_change_id_with_hidden_and_divergent_info(self),
  self.bookmarks(),
  self.tags(),
  self.working_copies(),
  if(empty, label("empty", "(no changes)")),
  if(description,
    description.first_line(),
    label(if(empty, "empty"), description_placeholder),
  ),
)
'''

'format_timestamp(timestamp)' = 'timestamp.ago()'

'hyperlink(url, text)' = '''
    concat(
      raw_escape_sequence("\e]8;;" ++ url ++ "\e\\"),
      text,
      raw_escape_sequence("\e]8;;\e\\"),
    )
'''

[aliases]

info = ["log", "--no-graph"]

lg = ["log", "-T", "brief"]

lst = ["info", "-T", "brief", "-r", "(heads(ancestors(visible_heads() ~ immutable(), 2) ~ (empty() & description(exact:'')))) | nmerges-"]

tug = ["bookmark", "move", "--from", "closest_bookmark(@-)", "--to", "current"]

book = ["bookmark"]

pushed = ["log", "--no-graph", "-r", "pushed-", "-Tbrief"]

drop = ["abandon"]

'op@' = ["op", "log", "-n1", "--no-graph", "-T", "id.short()"]

ls = ["util", "exec", "--", "bash", "-c", """
    rev="${1:-@}"
    jj log -r "ancestors(::$rev ~ immutable(), 2) | $rev:: | $rev" -Tbrief
""", "jj-alias"]

"show-" = ["show", "-r", "@-"]
"desc-" = ["describe", "-r", "@-"]
"diff-" = ["diff", "-r", "@-"]

# Usage: jj addparent <child aka mergerev> <newparent>
#
# jj rebase -s <mergerev> -d all:<mergerev>- -d <newparent>
addparent = ["util", "exec", "--", "bash", "-c", '''
    jj rebase -s $1 -d "all:$1-" -d $2
''', "jj-addparent"]

# Usage: jj rmparent <child aka mergerev> <oldparent>
#
# jj rebase -s <mergerev> -d "all:<mergerev>- ~ <oldparent>"
rmparent = ["util", "exec", "--", "bash", "-c", '''
    jj rebase -s $1 -d "all:$1- ~ $2"
''', "jj-rmparent"]

#bookmark.shove = ["bookmark", "move", "--allow-backwards"]

#shove = ["b", "--ignore-immutable", "shove", "--hard"]

export = ["util", "exec", "--", "python", "-c", '''
if "indentation makes this config file more readable":
    import argparse
    import os
    import sys
    from subprocess import check_output, run, Popen, PIPE

    parser = argparse.ArgumentParser()
    parser.add_argument("first", help="First patch to export. Should not be a merge.")
    parser.add_argument("last", nargs="?", help="Last patch to export.")
    parser.add_argument("--output", "-o", metavar="FILENAME", help="write the output to this file, not valid with --import")
    parser.add_argument("--bookmark", "-b", help="bookmark to create in destination, only valid with --import")
    parser.add_argument("--stack", action='store_true', help="import immutable stack that includes `first`")
    parser.add_argument("--import", dest="destdir", nargs="?", const=os.path.expanduser("~/src/mozilla-ff/"), help="import patch(es) into repo at this path.")
    parser.add_argument("--dry-run", action='store_true', help="only display command to execute")
    args = parser.parse_args()
    os.putenv("GIT_DIR", check_output(["jj", "git", "root"]))
    want_export_only = any(bool(opt) for opt in (args.output,))
    want_import = any(bool(opt) for opt in (args.destdir, args.bookmark))
    if want_import and want_export_only:
        print("both export-only and export-import options given", file=sys.stderr)
        sys.exit(1)
    def commit(rev):
        if args.dry_run:
            print(f"resolving {rev} ->", end=" ", flush=True)
            run(["jj", "--color=never", "--no-pager", "log", "--no-graph", "-r", rev, "-Tchange_id.short() ++ '\n'"], text=True)
        return check_output(["jj", "log", "--no-graph", "-r", rev, "-Tcommit_id.short(16)"], text=True)

    last = None
    if args.stack:
        first = commit(f"roots(::{args.first} & mutable())")
        last = commit(f"latest(heads({args.first}:: & mutable()))")
    elif args.last:
        first = commit(args.first)
        last = commit(args.last)
    else:
        first = commit(args.first)
        last = first
    if not args.last and not args.bookmark:
        args.bookmark = args.first
    cmd = ["git", "format-patch", "--notes", f"{first}^..{last}"]
    if args.output:
        cmd.append(f"--output={args.output}")
    else:
        cmd.append("--stdout")
    if args.dry_run:
        import shlex
        print(f"Command:\n  {shlex.join(cmd)}")
        sys.exit(0)
    if not args.destdir:
        os.execvp(cmd[0], cmd)
    process = Popen(cmd, stdout=PIPE, text=True)
    process = run(["git", "am"], stdin=process.stdout, cwd=args.destdir)
    if process.returncode != 0:
        print(f"Export to {args.destdir} failed! Aborting import (running `git am --abort`).")
        check_output(["git", "am", "--abort"], cwd=args.destdir)
    else:
        check_output(["jj", "git", "import"], cwd=args.destdir)
        check_output(["jj", "book", "create", "-r@-", args.bookmark], cwd=args.destdir)
''']

_export = ["util", "exec", "--", "bash", "-e", "-c", """
    TO_FF=0
    if [[ $1 = --ff ]]; then
      TO_FF=1
      shift
    elif [[ $1 = -o ]] || [[ $1 = --output ]]; then
      OUTPUT="--output=$2"
      shift
      shift
    else
      OUTPUT="--stdout"
    fi
    REV="${1:-@}"
    GITBASE=$(jj log --no-graph -r "roots(::$REV & mutable())" -T "commit_id")
    GITHEAD=$(jj log --no-graph -r "latest(($REV | $REV-) ~ empty())" -T "commit_id")
    if [[ $TO_FF = 0 ]]; then
      exec git format-patch $OUTPUT --notes "$GITBASE"^.."$GITHEAD"
    else
      git format-patch --stdout --notes "$GITBASE"^.."$GITHEAD" | ( cd $HOME/src/mozilla-ff; git am || git am --abort )
      echo "Tacked onto previous @"
    fi
""", "jj-export"]

phab = ["util", "exec", "--", "bash", "-c", """
    REV="${1:-@}"
    URL=$(jj log -r"$REV" -T "description" | perl -lne 'print $1 if /Differential Revision: (https.+)/')
    if [[ -n "$URL" ]]; then
        echo "Opening $URL"
        code --openExternal "$URL"
    else
        echo "Unable to find phabricator revision URL for $REV" >&2
    fi
""", "jj-phab"]

# "Back" button for the working directory: go back to (edit) the last (or Nth
# last) change that @ was editing, in op log order.
#
# Usage: jj back [N]
back = ["util", "exec", "--", "bash", "-c", """
    if [[ $# -gt 0 ]]; then N=$1; shift; else N=1; fi
    resolve () { jj log --no-graph -r@ -T'change_id.short() ++ "\\n"' "$@"; }
    current=$(resolve)
    jj op log --no-graph -T 'id.short() ++ "\\n"' | while read op; do
        old=$(resolve --at-op $op)
        if [[ $old != $current ]]; then
            echo -n "$N      \r"
            N=$(( $N - 1 ))
            if [[ $N -eq 0 ]]; then
                echo -n "        \r"
                if ! jj edit $old 2>/dev/null; then
                    # Handle temporary problem with evolution moving to the op log.
                    old_commit="$(jj evolog -r $old --at-op $op --no-graph -n1 -T 'commit_id.short() ++ ":"')"
                    old_commit="${old_commit%%:*}"
                    echo "$old not found, trying commit $old_commit"
                    jj edit $old_commit
                fi
                exit 0
            fi
            current="$old"
        fi
    done
""", "jj-back"]

# Massively overcomplicated? Does moz-phab already do all this?
#
# https://github.com/erichdongubler-mozilla/review/pull/1
#
# moz-phab will request confirmation before doing anything, so
# there is no need for a --dry-run flag.
#
# Use `jj yeet --debug` to see the input lines being processed.
#
# Extra command line options get passed to moz-phab. This only looks
# at a linear stack of patches ending in @-
#
yeet = ["util", "exec", "--", "python", "-c", '''
if "indentation makes this config file more readable":
    import argparse
    import re
    import shlex
    import sys
    from subprocess import run, Popen, PIPE

    parser = argparse.ArgumentParser("jj yeet", description="submit a single-bug stack of patches via moz-phab", add_help=False)
    parser.add_argument("--help", "-h", action="help", help=argparse.SUPPRESS)
    parser.add_argument("--debug", "-d", action="store_true", help="log debug info")
    parser.add_argument("--bug", default=False, help="submit only revisions for given bug")
    parser.add_argument("--source", "-s", help="source revision (base of the stack to submit)")
    args, rest = parser.parse_known_args()

    if args.source:
        target = args.source
    elif rest and not rest[0].startswith("-"):
        target = rest.pop(0)
    else:
        target = "latest((@ | @-) ~ empty())"

    #run(["jj", "bookmark", "move", "-B", "moz-phab", "--to", target], check=True)

    bug = args.bug
    upstream = None
    cmd = ["jj", "log", "-r", f"::({target}) & mutable()", "-T", "commit_id.short()++' '++change_id.short(12)++' '++description.first_line()++'\n'", "--no-graph"]
    process = Popen(cmd, stdout=PIPE, text=True)
    keep = []
    earliest = None
    latest = None  # aka @-
    for line in process.stdout:
        line = line.rstrip("\r\n")
        if args.debug:
            print(f"line is <<{line}>>")
        rev, change, desc = line.split(' ', 2)
        latest = latest or change
        upstream = rev
        rev_bug = None
        if m := re.match(r'[bB]ug (\d+)', desc):
            rev_bug = m.group(1)

        # If not grabbing the first rev, and either the bug number changed or
        # we went from None (no bug) -> None, done.
        if bug is not False and ((bug != rev_bug) or (rev_bug is None)):
            break
        bug = rev_bug
        keep.append(line)
        earliest = change

    if bug is None:
        print(f"submitting rev with no bug number with upstream {upstream}")
    else:
        print(f"submitting revs for bug {bug} with upstream {upstream}")
    for line in keep:
        print(f"  {line}")

    cmd = ["moz-phab", "submit", "--upstream", upstream, earliest, latest] + rest
    print(shlex.join(["Running:"] + cmd))
    run(cmd)
''']
