# .gdbinit file for debugging Mozilla code (Gecko, SpiderMonkey)

define pmethod
        p/a *(void**)(*((PRUint64*)mCallee) + 8 * mVTableIndex)
end

define showstring
  x/($1.Length())s $1.BeginReading()
end

define watchmark
  # First arg is the gc cell address
  # Second arg is the color
  #
  # Note that it is often handy to make the resulting watchpoint conditional on
  # having a matching address (since it will be breaking for anything sharing the
  # mark word)
  set $word = js::debug::GetMarkWordAddress($arg0)
  set $mask = js::debug::GetMarkMask($arg0, $arg1)
  watch -l *$word
end

define manualmark
  # Same args as watchmark
  set $addr=(uintptr_t)$arg0
  set $bit=($addr & js::gc::ChunkMask) / js::gc::CellBytesPerMarkBit + $arg1
  set $bitmap=(uintptr_t*)(($addr & ~js::gc::ChunkMask) | js::gc::ChunkMarkBitmapOffset)
  set $mask=((uintptr_t)1) << ($bit % 64)
  set $word=&$bitmap[$bit / 64]
end

define getheap
  p *(js::gc::ChunkLocation*)(((uint64_t)$arg0) & ~js::gc::ChunkMask | js::gc::ChunkLocationOffset)
end

define markinfo
  p js::debug::GetMarkInfo((js::gc::Cell*)$arg0)
end

define proxyhandler
  p ((js::detail::ProxyDataLayout)((void**)$arg0)[2]).handler
end

define ccwtarget
  p js::UncheckedUnwrapWithoutExpose((JSObject*)$arg0)
end

# Set of functions for tracking JIT code back to its creator.

define codeloc
  set $code_=$arg0
  watch *(void**)$code_
end

define eccopy
  set $offset_=(long)$code_ - (long)dst
  echo offset=
  p/x $offset
  set $src_ = m_formatter.m_buffer.m_buffer.mBegin
  set $precode_ = (long)$src_ + $offset_
  watch *(void**)$precode_
end

define realloc
  set $precode_ = (long)aPtr + $offset_
  watch *(void**)$precode_
end

define tcellzone
  set $addr=(uintptr_t)$arg0
  set $arena=(js::gc::Arena*)($addr & ~js::gc::ArenaMask)
  set $zone=$arena->zone
  p $zone
end
