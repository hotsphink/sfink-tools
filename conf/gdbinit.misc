# Various miscellaneous gdb helper functions

def watchofs
  # Usage: watchofs <ptr> <offset>
  watch -l *(void**)((char*)$arg0 + (size_t)$arg1)
end

#def reload
#  python reload($arg0)
#end

# from 10 20 'p strlen("%s")'
def pyrange
  python for x in xrange($arg0, $arg1): gdb.execute($arg2 % (x,))
end

def loudstep
  disp/i $pc
  set $i = 0
  while ($i < $arg0)
    si
    set $i = $i + 1
  end
end

# construct <type>
# Do Not Trust
def construct
  p $obj = ($arg0 *) operator new(sizeof($arg0), malloc(sizeof($arg0)))
end

# reappend "stem" "tail" [limit]
# Example: reappend "p obj->shape" "->parent" 3
python
class RepeatedAppend(gdb.Command):
  """Run a command, appending a "tail" to the command on every iteration, until an error or [limit] is reached"""
  def __init__(self):
    #super(Repeat, self).__init__("rep", gdb.COMMAND_USER)
    gdb.Command.__init__(self, "reappend", gdb.COMMAND_USER)

  def invoke(self, arg, from_tty):
    args = gdb.string_to_argv(arg)
    cmd = args[0]
    tail = args[1]
    limit = int(args[2]) if len(args) > 2 else 9999
    for i in range(limit):
      # print("Executing %s + %s x %d" % (args[0], args[1], limit))
      gdb.execute(cmd)
      cmd = cmd + tail

RepeatedAppend()
end
